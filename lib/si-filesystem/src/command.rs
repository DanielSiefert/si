use std::{ffi::OsString, path::PathBuf};

use fuser::{
    ReplyAttr, ReplyBmap, ReplyCreate, ReplyData, ReplyDirectory, ReplyEmpty, ReplyEntry,
    ReplyLock, ReplyOpen, ReplyWrite, ReplyXattr,
};
use nix::libc::c_int;

#[derive(Debug)]
pub enum FilesystemCommand {
    GetAttr {
        ino: u64,
        fh: Option<u64>,
        reply: ReplyAttr,
    },
    ReadDir {
        ino: u64,
        fh: u64,
        offset: i64,
        reply: ReplyDirectory,
    },
    Lookup {
        parent: u64,
        name: OsString,
        reply: ReplyEntry,
    },
    Forget {
        ino: u64,
        nlookup: u64,
    },
    SetAttr {
        ino: u64,
        mode: Option<u32>,
        uid: Option<u32>,
        gid: Option<u32>,
        size: Option<u64>,
        fh: Option<u64>,
        flags: Option<u32>,
        reply: ReplyAttr,
    },
    ReadLink {
        ino: u64,
        reply: ReplyData,
    },
    MkNod {
        parent: u64,
        name: OsString,
        mode: u32,
        umask: u32,
        rdev: u32,
        reply: ReplyEntry,
    },
    MkDir {
        parent: u64,
        name: OsString,
        mode: u32,
        umask: u32,
        reply: ReplyEntry,
    },
    Unlink {
        parent: u64,
        name: OsString,
        reply: ReplyEmpty,
    },
    RmDir {
        parent: u64,
        name: OsString,
        reply: ReplyEmpty,
    },
    SymLink {
        parent: u64,
        link_name: OsString,
        target: PathBuf,
        reply: ReplyEntry,
    },
    Rename {
        parent: u64,
        name: OsString,
        newparent: u64,
        newname: OsString,
        flags: u32,
        reply: ReplyEmpty,
    },
    Link {
        ino: u64,
        newparent: u64,
        newname: OsString,
        reply: ReplyEntry,
    },
    Open {
        ino: u64,
        flags: i32,
        reply: ReplyOpen,
    },
    Read {
        ino: u64,
        fh: u64,
        offset: i64,
        size: u32,
        flags: i32,
        lock_owner: Option<u64>,
        reply: ReplyData,
    },
    Write {
        ino: u64,
        fh: u64,
        offset: i64,
        data: Vec<u8>,
        write_flags: u32,
        flags: i32,
        lock_owner: Option<u64>,
        reply: ReplyWrite,
    },
    Flush {
        ino: u64,
        fh: u64,
        lock_owner: u64,
        reply: ReplyEmpty,
    },
    Release {
        ino: u64,
        fh: u64,
        flags: i32,
        lock_owner: Option<u64>,
        flush: bool,
        reply: ReplyEmpty,
    },
    FSync {
        ino: u64,
        fh: u64,
        datasync: bool,
        reply: ReplyEmpty,
    },
    OpenDir {
        ino: u64,
        flags: i32,
        reply: fuser::ReplyOpen,
    },
    ReadDirPlus {
        ino: u64,
        fh: u64,
        offset: i64,
        reply: fuser::ReplyDirectoryPlus,
    },
    ReleaseDir {
        ino: u64,
        fh: u64,
        flags: i32,
        reply: ReplyEmpty,
    },
    FSyncDir {
        ino: u64,
        fh: u64,
        datasync: bool,
        reply: ReplyEmpty,
    },
    SetXattr {
        ino: u64,
        name: OsString,
        value: Vec<u8>,
        flags: i32,
        position: u32,
        reply: ReplyEmpty,
    },
    GetXattr {
        ino: u64,
        name: OsString,
        size: u32,
        reply: ReplyXattr,
    },
    ListXattr {
        ino: u64,
        size: u32,
        reply: ReplyXattr,
    },
    RemoveXattr {
        ino: u64,
        name: OsString,
        reply: ReplyEmpty,
    },
    Access {
        ino: u64,
        mask: i32,
        reply: ReplyEmpty,
    },
    Create {
        parent: u64,
        name: OsString,
        mode: u32,
        umask: u32,
        flags: i32,
        reply: ReplyCreate,
    },
    GetLk {
        ino: u64,
        fh: u64,
        lock_owner: u64,
        start: u64,
        end: u64,
        typ: i32,
        pid: u32,
        reply: ReplyLock,
    },
    SetLk {
        ino: u64,
        fh: u64,
        lock_owner: u64,
        start: u64,
        end: u64,
        typ: i32,
        pid: u32,
        sleep: bool,
        reply: ReplyEmpty,
    },
    Bmap {
        ino: u64,
        blocksize: u32,
        idx: u64,
        reply: ReplyBmap,
    },
    IoCtl {
        ino: u64,
        fh: u64,
        flags: u32,
        cmd: u32,
        in_data: Vec<u8>,
        out_size: u32,
        reply: fuser::ReplyIoctl,
    },
    Fallocate {
        ino: u64,
        fh: u64,
        offset: i64,
        length: i64,
        mode: i32,
        reply: ReplyEmpty,
    },
    Lseek {
        ino: u64,
        fh: u64,
        offset: i64,
        whence: i32,
        reply: fuser::ReplyLseek,
    },
    CopyFileRange {
        ino_in: u64,
        fh_in: u64,
        offset_in: i64,
        ino_out: u64,
        fh_out: u64,
        offset_out: i64,
        len: u64,
        flags: u32,
        reply: ReplyWrite,
    },
}

impl FilesystemCommand {
    pub fn error(self, errno: c_int) {
        match self {
            FilesystemCommand::GetAttr { reply, .. } => reply.error(errno),
            FilesystemCommand::ReadDir { reply, .. } => reply.error(errno),
            FilesystemCommand::Lookup { reply, .. } => reply.error(errno),
            FilesystemCommand::Forget { .. } => {}
            FilesystemCommand::SetAttr { reply, .. } => reply.error(errno),
            FilesystemCommand::ReadLink { reply, .. } => reply.error(errno),
            FilesystemCommand::MkNod { reply, .. } => reply.error(errno),
            FilesystemCommand::MkDir { reply, .. } => reply.error(errno),
            FilesystemCommand::Unlink { reply, .. } => reply.error(errno),
            FilesystemCommand::RmDir { reply, .. } => reply.error(errno),
            FilesystemCommand::SymLink { reply, .. } => reply.error(errno),
            FilesystemCommand::Rename { reply, .. } => reply.error(errno),
            FilesystemCommand::Link { reply, .. } => reply.error(errno),
            FilesystemCommand::Open { reply, .. } => reply.error(errno),
            FilesystemCommand::Read { reply, .. } => reply.error(errno),
            FilesystemCommand::Write { reply, .. } => reply.error(errno),
            FilesystemCommand::Flush { reply, .. } => reply.error(errno),
            FilesystemCommand::Release { reply, .. } => reply.error(errno),
            FilesystemCommand::FSync { reply, .. } => reply.error(errno),
            FilesystemCommand::OpenDir { reply, .. } => reply.error(errno),
            FilesystemCommand::ReadDirPlus { reply, .. } => reply.error(errno),
            FilesystemCommand::ReleaseDir { reply, .. } => reply.error(errno),
            FilesystemCommand::FSyncDir { reply, .. } => reply.error(errno),
            FilesystemCommand::SetXattr { reply, .. } => reply.error(errno),
            FilesystemCommand::GetXattr { reply, .. } => reply.error(errno),
            FilesystemCommand::ListXattr { reply, .. } => reply.error(errno),
            FilesystemCommand::RemoveXattr { reply, .. } => reply.error(errno),
            FilesystemCommand::Access { reply, .. } => reply.error(errno),
            FilesystemCommand::Create { reply, .. } => reply.error(errno),
            FilesystemCommand::GetLk { reply, .. } => reply.error(errno),
            FilesystemCommand::SetLk { reply, .. } => reply.error(errno),
            FilesystemCommand::Bmap { reply, .. } => reply.error(errno),
            FilesystemCommand::IoCtl { reply, .. } => reply.error(errno),
            FilesystemCommand::Fallocate { reply, .. } => reply.error(errno),
            FilesystemCommand::Lseek { reply, .. } => reply.error(errno),
            FilesystemCommand::CopyFileRange { reply, .. } => reply.error(errno),
        }
    }
}
