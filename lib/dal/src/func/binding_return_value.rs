use crate::{AttributeValueId, WriteTenancy};
use serde::{Deserialize, Serialize};
use serde_json::Value as JsonValue;
use si_data_nats::NatsError;
use si_data_pg::PgError;
use telemetry::prelude::*;
use thiserror::Error;
use veritech_client::OutputStream;

use crate::{
    func::execution::{FuncExecution, FuncExecutionError, FuncExecutionPk},
    impl_standard_model, pk, standard_model, standard_model_accessor, standard_model_belongs_to,
    DalContext, Func, HistoryEventError, ReadTenancyError, StandardModel, StandardModelError,
    Timestamp, Visibility,
};

use super::{
    binding::{FuncBinding, FuncBindingId},
    FuncId,
};

const GET_FOR_ATTRIBUTE_VALUE: &str =
    include_str!("../queries/func_binding_return_value_get_for_attribute_value.sql");
const GET_FOR_FUNC_BINDING: &str =
    include_str!("../queries/func_binding_return_value_get_for_func_binding.sql");

#[derive(Error, Debug)]
pub enum FuncBindingReturnValueError {
    #[error("func binding error: {0}")]
    FuncBinding(String),
    #[error("function execution error: {0}")]
    FuncExecution(#[from] FuncExecutionError),
    #[error("history event error: {0}")]
    HistoryEvent(#[from] HistoryEventError),
    #[error("missing func binding return value")]
    Missing,
    #[error("nats txn error: {0}")]
    Nats(#[from] NatsError),
    #[error("pg error: {0}")]
    Pg(#[from] PgError),
    #[error("read tenancy error: {0}")]
    ReadTenancy(#[from] ReadTenancyError),
    #[error("error serializing/deserializing json: {0}")]
    SerdeJson(#[from] serde_json::Error),
    #[error("standard model error: {0}")]
    StandardModel(#[from] StandardModelError),
}

pub type FuncBindingReturnValueResult<T> = Result<T, FuncBindingReturnValueError>;

pk!(FuncBindingReturnValuePk);
pk!(FuncBindingReturnValueId);

#[derive(Deserialize, Serialize, Debug, Clone, PartialEq, Eq)]
pub struct FuncBindingReturnValue {
    pk: FuncBindingReturnValuePk,
    id: FuncBindingReturnValueId,
    /// The unprocessed return value is the "real" result, unprocessed for any other behavior
    /// This is useful when a function binding result is used as a generator for other
    /// results - it lets us see where things came from.
    unprocessed_value: Option<serde_json::Value>,
    /// The processed return value.
    value: Option<serde_json::Value>,
    /// Function Execution IDs can be attached later for lookup and are optional.
    func_execution_pk: FuncExecutionPk,
    #[serde(flatten)]
    tenancy: WriteTenancy,
    #[serde(flatten)]
    timestamp: Timestamp,
    #[serde(flatten)]
    visibility: Visibility,
}

impl_standard_model! {
    model: FuncBindingReturnValue,
    pk: FuncBindingReturnValuePk,
    id: FuncBindingReturnValueId,
    table_name: "func_binding_return_values",
    history_event_label_base: "function_binding_return_value",
    history_event_message_name: "Function Binding Return Value"
}

// If this binding result was generated by another func binding result, track it here.
//  generated_by_func_binding_result_id: Option<FuncBindingResultId>,
//  func_binding_id: FuncBindingId,
//  func_id: FuncId,

impl FuncBindingReturnValue {
    #[allow(clippy::too_many_arguments)]
    #[instrument(skip_all)]
    pub async fn new(
        ctx: &DalContext,
        unprocessed_value: Option<serde_json::Value>,
        value: Option<serde_json::Value>,
        func_id: FuncId,
        func_binding_id: FuncBindingId,
        func_execution_pk: FuncExecutionPk,
    ) -> FuncBindingReturnValueResult<Self> {
        let row = ctx
            .txns()
            .pg()
            .query_one(
                "SELECT object FROM func_binding_return_value_create_v1($1, $2, $3, $4, $5)",
                &[
                    ctx.write_tenancy(),
                    ctx.visibility(),
                    &unprocessed_value,
                    &value,
                    &func_execution_pk,
                ],
            )
            .await?;
        let object: FuncBindingReturnValue =
            standard_model::finish_create_from_row(ctx, row).await?;
        object.set_func(ctx, &func_id).await?;
        object.set_func_binding(ctx, &func_binding_id).await?;

        Ok(object)
    }

    pub async fn get_output_stream(
        &self,
        ctx: &DalContext,
    ) -> FuncBindingReturnValueResult<Option<Vec<OutputStream>>> {
        if self.func_execution_pk == FuncExecutionPk::from(-1) {
            return Ok(None);
        }

        let func_execution = FuncExecution::get_by_pk(ctx, &self.func_execution_pk).await?;
        Ok(func_execution.into_output_stream())
    }

    // NOTE(nick,fletcher): we might not need these. They might be DB-only.
    // pub fn set_func_execution_op(&mut self, func_execution_id: Option<FuncExecutionId) {
    //     self.func_execution_id = Some(func_execution_id);
    // }
    //
    // pub fn unset_func_execution_id(&mut self) {/
    //     self.func_execution_id = None;
    // }
    //
    // pub fn func_execution_id(&self) -> Option<FuncExecutionId> {
    //     self.func_execution_id
    // }

    pub async fn get_by_attribute_value_id(
        ctx: &DalContext,
        attribute_value_id: AttributeValueId,
    ) -> FuncBindingReturnValueResult<Option<Self>> {
        let row = ctx
            .txns()
            .pg()
            .query_opt(
                GET_FOR_ATTRIBUTE_VALUE,
                &[ctx.read_tenancy(), ctx.visibility(), &attribute_value_id],
            )
            .await?;

        Ok(standard_model::option_object_from_row(row)?)
    }

    /// Attempts to retrieve [`Self`] by [`FuncBindingId`].
    pub async fn get_by_func_binding_id(
        ctx: &DalContext,
        func_binding_id: FuncBindingId,
    ) -> FuncBindingReturnValueResult<Option<Self>> {
        let row = ctx
            .txns()
            .pg()
            .query_opt(
                GET_FOR_FUNC_BINDING,
                &[ctx.read_tenancy(), ctx.visibility(), &func_binding_id],
            )
            .await?;
        let object = standard_model::option_object_from_row(row)?;
        Ok(object)
    }

    // Note(paulo): this is dumb
    #[allow(clippy::too_many_arguments)]
    #[instrument(skip_all)]
    pub async fn upsert(
        ctx: &DalContext,
        unprocessed_value: Option<serde_json::Value>,
        value: Option<serde_json::Value>,
        func_id: FuncId,
        func_binding_id: FuncBindingId,
        func_execution_pk: FuncExecutionPk,
    ) -> FuncBindingReturnValueResult<Self> {
        let return_value = Self::get_by_func_binding_id(ctx, func_binding_id).await?;
        if let Some(mut return_value) = return_value {
            return_value.set_value(ctx, value).await?;
            return_value
                .set_unprocessed_value(ctx, unprocessed_value)
                .await?;
            return_value
                .set_func_execution_pk(ctx, func_execution_pk)
                .await?;
            Ok(return_value)
        } else {
            Self::new(
                ctx,
                unprocessed_value,
                value,
                func_id,
                func_binding_id,
                func_execution_pk,
            )
            .await
        }
    }

    standard_model_accessor!(
        func_execution_pk,
        Pk(FuncExecutionPk),
        FuncBindingReturnValueResult
    );
    standard_model_accessor!(
        unprocessed_value,
        OptionJson<JsonValue>,
        FuncBindingReturnValueResult
    );
    standard_model_accessor!(value, OptionJson<JsonValue>, FuncBindingReturnValueResult);

    standard_model_belongs_to!(
        lookup_fn: func,
        set_fn: set_func,
        unset_fn: unset_func,
        table: "func_binding_return_value_belongs_to_func",
        model_table: "funcs",
        belongs_to_id: FuncId,
        returns: Func,
        result: FuncBindingReturnValueResult,
    );

    standard_model_belongs_to!(
        lookup_fn: func_binding,
        set_fn: set_func_binding,
        unset_fn: unset_func_binding,
        table: "func_binding_return_value_belongs_to_func_binding",
        model_table: "func_bindings",
        belongs_to_id: FuncBindingId,
        returns: FuncBinding,
        result: FuncBindingReturnValueResult,
    );
}
