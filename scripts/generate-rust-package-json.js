const fs = require('fs');
const path = require('path');
const fg = require('fast-glob');
const toml = require('toml');

function transformInternalDeps(cargoTomlDeps) {
  const packageJsonDeps = {};

  for (const moduleName in cargoTomlDeps) {
    // look for internal deps (ie within the monorepo)
    if (cargoTomlDeps[moduleName].path) {
      
      // TODO: remove this
      // need to get rid of circular dependency dal <> dal-test
      if (moduleName === 'dal-test') continue;

      packageJsonDeps[moduleName] = 'workspace:*';
    }
  }
  return packageJsonDeps;
}

const cargoTomlFiles = fg.sync('(bin|lib)/*/Cargo.toml');

const BOOT_PACKAGES = ['pinga', 'sdf-cli', 'veritech-cli', 'council-cli'];

// add cyclone as veritech dep
// lang-js to cyclone

for (const tomlPath of cargoTomlFiles) {
  // console.log(tomlPath);
  const tomlFileRaw = fs.readFileSync(tomlPath, 'utf-8');
  // console.log(tomlFileRaw);
  const tomlData = toml.parse(tomlFileRaw);
  // console.log(tomlData);

  const binPath = `../../target/debug/${tomlData.package.name.replace('-cli', '')}`;

  const packageJsonData = {
    name: tomlData.package.name,
    version: tomlData.package.version,
    private: true,
    description: "AUTOGENERATED FROM Cargo.toml FILE - DO NOT EDIT DIRECTLY",
    scripts: {
      "clean": "cargo clean",
      "build": "cargo build",
      "run": "cargo run",
      "test": "cargo test",
      "fix:format": "cargo fmt",
      "fix:lint": "cargo fix --edition-idioms --allow-dirty --allow-staged",
      "fix": "pnpm fix:format && pnpm fix:lint",
      "check:lint": "cargo clippy --no-deps --all-targets -- -D warnings",
      "check:doc": "env RUSTDOCFLAGS=\"-Dwarnings\" cargo doc --no-deps",
      "check:format": "cargo fmt -- --check",
      "check": "pnpm check:format && pnpm check:lint && pnpm check:doc",
      "prepush": "pnpm check && pnpm test",
      ...BOOT_PACKAGES.includes(tomlData.package.name) && { "dev:backend": `CARGO_MANIFEST_DIR=\${PWD} ${binPath}` },
    },
    // the dependencies in package.json files is used by turborepo when running dependent tasks
    dependencies: {
      ...transformInternalDeps(tomlData.dependencies),
      ...tomlData.package.name === 'veritech-cli' && {
        'cyclone-cli': "workspace:*",
        'lang-js': "workspace:*",
      },
      ...tomlData.package.name === 'cyclone-cli' && {
        'lang-js': "workspace:*",
      },
    },
    devDependencies: {
      ...transformInternalDeps(tomlData['dev-dependencies']),
    }
  }

  const packageJsonPath = tomlPath.replace('/Cargo.toml', '/package.json');
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJsonData, null, 2));
}
