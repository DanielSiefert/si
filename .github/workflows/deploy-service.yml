name: Deploy Service

run-name: Deploying ${{ inputs.service }}

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "where to deploy"
      service:
        type: string
        required: true
        description: "service to deploy"
      version:
        type: string
        required: true
        description: "version to deploy"

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    name: Deploy Service
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Deploy web
        id: deploy-web
        if: ${{ inputs.service == 'web' }}
        run: |
            ENVIRONMENT="${{ inputs.environment }}"
            VERSION="${{ inputs.version }}"
            if docker manifest inspect "systeminit/web:$VERSION" >/dev/null 2>&1; then
                echo "Setting web to $VERSION."
                # we get the current task def for the service, update the image, and clean up the json so we can register it as a new task def
                task_definition_arn=$(aws ecs describe-services \
                                        --cluster "${ENVIRONMENT}-cluster" \
                                        --services "${ENVIRONMENT}-frontend" \
                                        --query 'services[0].taskDefinition' \
                                        --output text)
                new_task_definition=$(aws ecs describe-task-definition --task-definition "$task_definition_arn" | \
                  jq --arg IMAGE "systeminit/web:$VERSION" '.taskDefinition | .containerDefinitions[0].image = $IMAGE |
                  del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
                aws ecs register-task-definition --cli-input-json "$new_task_definition"
                aws ecs update-service \
                  --cluster "${ENVIRONMENT}-cluster" \
                  --service "${ENVIRONMENT}-frontend" \
                  --task-definition "$ENVIRONMENT-web" \
                  --force-new-deployment

                while true; do
                  deployment_status=$(aws ecs describe-services \
                    --cluster "${ENVIRONMENT}-cluster" \
                    --service "${ENVIRONMENT}-frontend" \
                    --query 'services[0].deployments[?status==`PRIMARY`].rolloutState' \
                    --output text)

                  echo "Current deployment status: $deployment_status"

                  if [[ "$deployment_status" == "COMPLETED" ]]; then
                    echo "Service update completed successfully."
                    break
                  elif [[ "$deployment_status" == "FAILED" ]]; then
                    echo "Service update failed."
                    exit 1
                  else
                    echo "Service update is still in progress. Waiting..."
                    sleep 15
                  fi
                done
            else
                echo "Image systeminit/web:$VERSION not found on Docker Hub. Skipping!"
                exit 1
            fi

      - name: Deploy service
        if: ${{ inputs.service != 'web' }}
        run: |
            check_version_exists() {
                local version="$1"
                local service="$2"
                local URL="https://artifacts.systeminit.com/${service}/${version}/omnibus/linux/x86_64/${service}-${version}-omnibus-linux-x86_64.tar.gz"
                local check=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
                [[ "$check" -eq 200 || "$check" -eq 301 ]]
            }

            ENVIRONMENT="${{ inputs.environment }}"
            SERVICE="${{ inputs.service }}"
            VERSION="${{ inputs.version }}"

            if check_version_exists "$VERSION" "$SERVICE"; then
                echo "Setting $SERVICE to $VERSION."
                aws ssm put-parameter --name "${ENVIRONMENT}-si-version-$SERVICE" --value "$VERSION" --type "String" --overwrite
                id=$(aws autoscaling start-instance-refresh \
                  --auto-scaling-group-name "${ENVIRONMENT}-${SERVICE}" \
                  --query 'InstanceRefreshId' --output text)

                # poll the instance refresh status
                while true; do
                  status=$(aws autoscaling describe-instance-refreshes \
                    --auto-scaling-group-name "${ENVIRONMENT}-${SERVICE}" \
                    --query "InstanceRefreshes[?InstanceRefreshId=='${id}'].Status" \
                    --output text)

                  echo "Instance refresh status: $status"

                  if [[ "$status" == "Successful" ]]; then
                    echo "Instance refresh completed successfully."
                    break
                  elif [[ "$status" == "Failed" || "$status" == "Cancelled" ]]; then
                    echo "Instance refresh failed or was cancelled."
                    exit 1
                  else
                    echo "Instance refresh is still in progress. Waiting..."
                    sleep 15
                  fi
                done
            else
                echo "Version $VERSION for $SERVICE not found in the artifacts registry. Skipping!"
                exit 1
            fi

  invalidate-cache:
    if: ${{ inputs.service == 'web' }}
    needs: deploy
    uses: ./.github/workflows/invalidate-cache.yml
    with:
      environment: ${{ inputs.environment }}
    secrets: inherit
