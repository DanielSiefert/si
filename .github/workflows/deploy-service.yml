name: Deploy Service to Tools Prod

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: "where to deploy"
        default: "tools"
        options:
          - tools
          - production
      service:
        type: choice
        required: true
        description: "service to deploy"
        options:
          - all
          - pinga
          - rebaser
          - sdf
          - veritech
          - web
      version:
        type: string
        required: true
        description: "version to deploy -- NOTEL: this does not yet work for web; it will always deploy stable using this"
        default: "stable"

jobs:
  deploy:
    name: Deploy Service
    runs-on: ubuntu-latest
    steps:
       # invalidate Artifact Store Cloudfront so we get latest
      - name: Configure AWS credentials for shared-prod
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_SHARED_PROD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SHARED_PROD_SECRET_KEY }}
          aws-region: us-east-1
      - name: Invalidate Artifacts Cache
        run: |
          DIST_ID=E2HW6000JEVIPB
          # Create a CloudFront invalidation for all objects (/*)
          invalidation_id=$(aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*" --query 'Invalidation.Id' --output text)
          # Check the status of the invalidation until it's completed
          while [[ "$(aws cloudfront get-invalidation --distribution-id $DIST_ID --id $invalidation_id --query 'Invalidation.Status' --output text)" != "Completed" ]]; do
              echo "Invalidation is still in progress. Waiting..."
              sleep 5
          done
          echo "Invalidation is complete."

       # deploy to tools
      - name: Configure AWS credentials for tools-prod
        if: ${{ github.event.inputs.environment == 'tools' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_TOOLS_PROD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_TOOLS_PROD_SECRET_KEY }}
          aws-region: us-east-1

       # deploy to production
      - name: Configure AWS credentials for production
        if: ${{ github.event.inputs.environment == 'production' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_PRODUCTION_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_PRODUCTION_SECRET_KEY }}
          aws-region: us-east-1

      - name: Instance Refresh for chosen services & CDN Invalidation
        run: |
          invalidate_distribution() {
            DIST_ID=$1
            # Create a CloudFront invalidation for all objects (/*)
            invalidation_id=$(aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*" --query 'Invalidation.Id' --output text)
            # Check the status of the invalidation until it's completed
            while [[ "$(aws cloudfront get-invalidation --distribution-id $DIST_ID --id $invalidation_id --query 'Invalidation.Status' --output text)" != "Completed" ]]; do
                echo "Invalidation is still in progress. Waiting..."
                sleep 5
            done
            echo "Invalidation of web frontend is complete."
          }

          ENVIRONMENT="${{ github.event.inputs.environment }}"
          SERVICE="${{ github.event.inputs.service }}"
          VERSION="${{ github.event.inputs.version }}"

          if [ "$ENVIRONMENT" == "tools" ]; then
              cloudfront="E1MTI3007PGD67"
          else
              cloudfront="E3TQ4YC3FXZU7K"
          fi

          if [ "$SERVICE" == "all" ]; then
              echo "Setting versions to ${VERSION}."
              echo "Deploying everything!"
              services=("pinga" "rebaser" "sdf" "veritech")
              for service in "${services[@]}"; do
                  aws ssm put-parameter --name "$ENVIRONMENT-si-version-$service" --value "$VERSION" --type "String" --overwrite
                  aws autoscaling start-instance-refresh --auto-scaling-group-name "$ENVIRONMENT-$service"
              done
              aws ecs update-service --cluster "$ENVIRONMENT-cluster" --service "$ENVIRONMENT-frontend" --force-new-deployment
              invalidate_distribution "$cloudfront"

          elif [ "$SERVICE" == "web" ]; then
              echo "Deploying $SERVICE!"
              aws ecs update-service --cluster "$ENVIRONMENT-cluster" --service "$ENVIRONMENT-frontend" --force-new-deployment
              invalidate_distribution "$cloudfront"

          else
              echo "Setting version to ${VERSION}."
              aws ssm put-parameter --name "$ENVIRONMENT-si-version-$SERVICE" --value "$VERSION" --type "String" --overwrite
              echo "Deploying $SERVICE!"
              aws autoscaling start-instance-refresh --auto-scaling-group-name "$ENVIRONMENT-$SERVICE"
          fi
