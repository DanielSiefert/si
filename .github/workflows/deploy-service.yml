name: Deploy Service

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "where to deploy"
      service:
        type: string
        required: true
        description: "service to deploy"
      version:
        type: string
        required: true
        description: "version to deploy"
    secrets:
      access_key:
        required: true
      secret_key:
        required: true

jobs:
  deploy:
    name: Deploy Service
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.access_key }}
          aws-secret-access-key: ${{ secrets.secret_key }}
          aws-region: us-east-1

      - name: Deploy web
        id: deploy-web
        if: ${{ github.event.inputs.service == 'web' }}
        run: |
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            VERSION="${{ github.event.inputs.version }}"
            if docker manifest inspect "systeminit/web:$VERSION" >/dev/null 2>&1; then
                echo "Setting web to $VERSION."
                task_definition_arn=$(aws ecs describe-services --cluster "${ENVIRONMENT}-cluster" --services "${ENVIRONMENT}-frontend" --query 'services[0].taskDefinition' --output text)
                new_task_definition=$(aws ecs describe-task-definition --task-definition "$task_definition_arn" | \
                    jq --arg version "$VERSION" '.taskDefinition.containerDefinitions[0].image = "systeminit/web:\($version)"')
                aws ecs register-task-definition --cli-input-json "$new_task_definition"
                aws ecs update-service --cluster "${ENVIRONMENT}-cluster" --service "${ENVIRONMENT}-frontend" --force-new-deployment
            else
                echo "Image systeminit/web:$VERSION not found on Docker Hub. Skipping!"
            fi

      - name: Deploy service
        if: ${{ github.event.inputs.service != 'web' }}
        run: |
            check_version_exists() {
                local version="$1"
                local service="$2"
                local URL="https://artifacts.systeminit.com/${service}/${version}/omnibus/linux/x86_64/${service}-${version}-omnibus-linux-x86_64.tar.gz"
                local check=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
                [[ "$check" -eq 200 || "$check" -eq 301 ]]
            }

            ENVIRONMENT="${{ github.event.inputs.environment }}"
            SERVICE="${{ github.event.inputs.service }}"
            VERSION="${{ github.event.inputs.version }}"

            if check_version_exists "$VERSION" "$SERVICE"; then
                echo "Setting $SERVICE to $VERSION."
                aws ssm put-parameter --name "${ENVIRONMENT}-si-version-$SERVICE" --value "$VERSION" --type "String" --overwrite
                aws autoscaling start-instance-refresh --auto-scaling-group-name "${ENVIRONMENT}-${SERVICE}"
            else
                echo "Version $VERSION for $SERVICE not found in the artifacts registry. Skipping!"
            fi

  invalidate-cache:
    if: ${{ github.event.inputs.service == 'web' }}
    needs: deploy
    uses: ./.github/workflows/invalidate-cache.yml
    with:
      environment: shared
    secrets: inherit
