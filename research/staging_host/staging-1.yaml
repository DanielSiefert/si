variant: fcos
version: 1.4.0
storage:
  trees:
  files:
    - path: /etc/hostname
      contents:
        inline: staging-1
    - path: /opt/dockersock.pp
      mode: 0755
      contents:
        local: research/staging_host/dockersock.pp
    # We need to disable SELINUX (or make a new policy) so that watchtower can get credentials to dockerhub
    #    - path: /etc/selinux/config
    #      mode: 0644
    #      contents:
    #        local: research/staging_host/selinux.conf
    - path: /usr/local/bin/docker-auth.sh
      mode: 0755
      contents:
        local: research/staging_host/scripts/docker-auth.sh
    - path: /usr/local/bin/load-keys.sh
      mode: 0755
      contents:
        local: research/staging_host/scripts/load-keys.sh
    - path: /opt/deploy/Makefile
      mode: 0755
      contents:
        local: deploy/Makefile
    - path: /opt/deploy/scripts/gateway.sh
      mode: 0755
      contents:
        local: deploy/scripts/gateway.sh
    - path: /opt/deploy/scripts/reset-database.sh
      mode: 0755
      contents:
        local: deploy/scripts/reset-database.sh
    - path: /opt/deploy/docker-compose.yml
      contents:
        local: deploy/docker-compose.yml
    - path: /opt/deploy/docker-compose.env-static.yml
      contents:
        local: deploy/docker-compose.env-static.yml
    - path: /opt/deploy/docker-compose.pganalyze.yml
      contents:
        local: deploy/docker-compose.pganalyze.yml
    - path: /opt/deploy/docker-compose.staging.yml
      contents:
        local: deploy/docker-compose.staging.yml
systemd:
  units:
    - name: install-selinux-dockersock-policy.service
      enabled: true
      contents: |
        [Unit]
        Description=Install SELINUX Docker sock policy
        Wants=network-online.target
        After=network-online.target
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        WorkingDirectory=/opt
        ExecStart=semodule -i dockersock.pp

        [Install]
        WantedBy=multi-user.target
    - name: layer-awscli.service
      enabled: true
      contents: |
        [Unit]
        Description=Install AWS cli
        Wants=network-online.target
        After=network-online.target
        
        # We run before `zincati.service` to avoid conflicting rpm-ostree
        # transactions. - https://docs.fedoraproject.org/en-US/fedora-coreos/os-extensions/
        Before=zincati.service


        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install --apply-live --allow-inactive --idempotent awscli

        [Install]
        WantedBy=multi-user.target
    # Note(victor): This is not vital but is necessary. I will not be taking questions at this time.
    - name: layer-vim.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Vim
        Wants=network-online.target
        After=network-online.target
        
        # We run before `zincati.service` to avoid conflicting rpm-ostree
        # transactions. - https://docs.fedoraproject.org/en-US/fedora-coreos/os-extensions/
        After=layer-awscli.service
        Before=zincati.service


        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install --apply-live --allow-inactive --idempotent vim

        [Install]
        WantedBy=multi-user.target
    - name: layer-make.service
      enabled: true
      contents: |
        [Unit]
        Description=Install Make
        Wants=network-online.target
        After=network-online.target
        
        After=layer-vim.service
        Before=zincati.service


        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install --apply-live --allow-inactive --idempotent make

        [Install]
        WantedBy=multi-user.target
    - name: layer-docker-compose.service
      enabled: true
      contents: |
        [Unit]
        Description=Install docker-compose
        Wants=network-online.target
        After=network-online.target
        
        After=layer-make.service
        Before=zincati.service


        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install --apply-live --allow-inactive --idempotent docker-compose

        [Install]
        WantedBy=multi-user.target
    - name: docker-auth.service
      enabled: true
      contents: |
        [Unit]
        Description=Authenticate to container image repository
        After=layer-awscli.service
        Requires=layer-awscli.service
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=30s
        ExecStart=/usr/local/bin/docker-auth.sh

        [Install]
        WantedBy=multi-user.target
    - name: load-keys.service
      enabled: true
      contents: |
        [Unit]
        Description=Set
        After=layer-awscli.service
        Requires=layer-awscli.service
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=30s
        ExecStart=/usr/local/bin/load-keys.sh

        [Install]
        WantedBy=multi-user.target
    - name: deployment.service
      enabled: true
      contents: |
        [Unit]
        Description=System Initiative Deployment
        After=network-online.target
        Wants=network-online.target

        After=layer-make.service
        Requires=layer-make.service
        After=layer-docker-compose.service
        Requires=layer-docker-compose.service

        After=docker-auth.service
        Requires=docker-auth.service
        After=load-keys.service
        Requires=load-keys.service

        [Service]
        TimeoutStartSec=60s
        WorkingDirectory=/opt/deploy
        ExecStartPre=-/usr/bin/docker-compose down
        ExecStart=make staging

        [Install]
        WantedBy=multi-user.target
